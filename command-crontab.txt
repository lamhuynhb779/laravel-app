In the past, you may have written a cron configuration entry for each task you needed to schedule on your server. 
However, this can quickly become a pain because your task schedule is no longer in source control and you must SSH 
into your server to view your existing cron entries or add additional entries.

Laravel's command scheduler offers a fresh approach to managing scheduled tasks on your server. 
The scheduler allows you to fluently and expressively define your command schedule within your Laravel application itself. 
When using the scheduler, only a single cron entry is needed on your server. 
Your task schedule is defined in the app/Console/Kernel.php file's schedule method. 
To help you get started, a simple example is defined within the method.

// view an overview of your scheduled tasks
php artisan schedule:list

// Create command cronjob
php artisan make:command DemoCron --command=demo:cron

// Run cronjob
php artisan demo:cron

// Starting The Scheduler
// This Cron will call the Laravel command scheduler every minute. 
// When the schedule:run command is executed, Laravel will evaluate your scheduled tasks and runs the tasks that are due.
* * * * * cd /path-to-your-project && php artisan schedule:run >> /dev/null 2>&1

// SET CRONTAB ON SERVER
Step 1: run schedule
$ php artisan schedule:run
Step 2: ssh into your server, get inside your project with cd laravel-project-name and run the following command
$ crontab -e
Step 3: write to file
* * * * * cd /your-project-path && php artisan schedule:run >> /dev/null 2>&1
